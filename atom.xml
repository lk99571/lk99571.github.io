<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Single</title>
  
  <subtitle>天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yasso.top/"/>
  <updated>2018-12-19T12:49:18.126Z</updated>
  <id>http://yasso.top/</id>
  
  <author>
    <name>Ronin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java内存分析1</title>
    <link href="http://yasso.top//blog/2018/12/19/java%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    <id>http://yasso.top//blog/2018/12/19/java内存分析/</id>
    <published>2018-12-19T04:33:38.000Z</published>
    <updated>2018-12-19T12:49:18.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM内存分区"><a href="#JVM内存分区" class="headerlink" title="JVM内存分区"></a>JVM内存分区</h2><p><strong>栈：</strong></p><p>1、局部变量放置于栈中</p><p>2、线程是私有的，不能实现线程间的共享，生命周期与线程相同</p><p>3、它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息</p><p><strong>堆：</strong></p><p>1、放置new出来的对象，因此该区域经常发生垃圾回收操作</p><p>2、所有线程所共享的一块内存，在虚拟机启动时创建</p><p><strong>方法区：</strong></p><p>1、用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据</p><p>2、该区域是被线程共享的</p><p><strong><em>如图：</em></strong></p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=920553085,2017787163&amp;fm=173&amp;app=25&amp;f=JPEG?w=639&amp;h=292&amp;s=E1127094DEE0748848FF19D70300D0A8" alt="cmd-markdown-logo"></p><p><strong><em>Person类</em></strong></p><pre><code>public class Person {    String name;    int age;    public Person(){}    public Person(String pName,int pAge){        name = pName;        age = pAge;    }    public void eat(){        System.out.println(&quot;吃饭饭&quot;);    }    public void sleep(){        System.out.println(&quot;睡觉觉&quot;);    }}</code></pre><p><strong><em>Test类</em></strong></p><pre><code>public class Test01 {    public static void main(String[] args) {        //去方法区找Person类，发现没有，通过Class Loader(类加载器)加载Person类，将Person类加载到方法区中          //创建 p 局部变量          //在堆中创建一个Person对象，并将这个对象的地址赋值给 p        Person p = new Person();        //通过 p 这个引用先找到Person对象，然后找到 name 属性          //创建&quot;张三&quot;这个字符串常量，并将它放在常量池中          // 将 p 的 name 属性 赋值为这个字符串的引用        p.name = &quot;张三&quot;;        //通过 p 这个引用先找到Person对象，然后找到 eat() 方法的引用，然后去方法区内找到方法，执行该方法，开一个栈帧，执行完成后释放这个栈帧        p.eat();    }}</code></pre><p>注：基本数据类型会直接赋值，引用类型是把对象的地址赋值</p><p><strong><em>内存分析图：</em></strong><br><img src="https://i.imgur.com/btfhkDX.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JVM内存分区&quot;&gt;&lt;a href=&quot;#JVM内存分区&quot; class=&quot;headerlink&quot; title=&quot;JVM内存分区&quot;&gt;&lt;/a&gt;JVM内存分区&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;栈：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、局部变量放置于栈中&lt;/p&gt;
&lt;p&gt;2、线程
      
    
    </summary>
    
      <category term="java学习笔记" scheme="http://yasso.top/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring框架整合</title>
    <link href="http://yasso.top//blog/2018/06/11/Spring/"/>
    <id>http://yasso.top//blog/2018/06/11/Spring/</id>
    <published>2018-06-11T14:02:28.451Z</published>
    <updated>2018-06-11T16:20:01.442Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录</strong></p><ul><li>Spring 概述  </li><li>依赖注入  </li><li>Spring beans  </li><li>Spring注解  </li><li>Spring数据访问  </li><li>Spring面向切面编程（AOP）  </li><li>Spring MVC</li></ul><p><strong><font size="4">Spring 概述</font></strong></p><p><strong>1. 什么是spring?</strong><br>Spring 是个java企业级应用的开源开发框架。Spring主要用来开发Java应用，但是有些扩展是针对构建J2EE平台的web应用。Spring 框架目标是简化Java企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯。</p><p><strong>2. 使用Spring框架的好处是什么？</strong></p><ul><li>轻量：Spring 是轻量的，基本的版本大约2MB。  </li><li>控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。  </li><li>面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。  </li><li>容器：Spring 包含并管理应用中对象的生命周期和配置。  </li><li>事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。  </li><li>异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。</li></ul><p><strong>3.  Spring的核心模块？</strong></p><ol><li><strong>核心容器（Spring Core）：</strong>核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。Spring使用BeanFactory来产生和管理Bean，它是工厂模式的实现。BeanFactory使用控制反转(IoC)模式将应用的配置和依赖性规范与实际的应用程序代码分开。  </li><li><strong>应用上下文（Spring Context）：</strong>Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，如JNDI、EJB、电子邮件、国际化、校验和调度功能。  </li><li><strong>Spring面向切面编程（Spring AOP）：</strong>通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。  </li><li><strong>JDBC和DAO模块（Spring DAO）：</strong>JDBC、DAO的抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理，和不同数据库供应商所抛出的错误信息。异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。  </li><li><strong>对象实体映射（Spring ORM）：</strong>Spring框架插入了若干个ORM框架，从而提供了ORM对象的关系工具，其中包括了Hibernate、JDO和 IBatis SQL Map等，所有这些都遵从Spring的通用事物和DAO异常层次结构。  </li><li><strong>Web模块（Spring Web）：</strong>Web上下文模块建立在应用程序上下文模块之上，为基于web的应用程序提供了上下文。所以Spring框架支持与Struts集成，web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。  </li><li><strong>MVC模块（Spring Web MVC）：</strong>MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。MVC容纳了大量视图技术，其中包括JSP、POI等，模型来有JavaBean来构成，存放于m当中，而视图是一个街口，负责实现模型，控制器表示逻辑代码，由c的事情。Spring框架的功能可以用在任何J2EE服务器当中，大多数功能也适用于不受管理的环境。Spring的核心要点就是支持不绑定到特定J2EE服务的可重用业务和数据的访问的对象，毫无疑问这样的对象可以在不同的J2EE环境，独立应用程序和测试环境之间重用。</li></ol><p><strong>4.  什么是Spring IOC 容器？</strong><br>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><p><strong>5.  IOC的优点是什么？</strong><br>IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。</p><p><strong>6. ApplicationContext通常的实现是什么?</strong></p><ul><li><strong>FileSystemXmlApplicationContext ：</strong>此容器从一个XML文件中加载beans的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。  </li><li><strong>ClassPathXmlApplicationContext：</strong>此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。</li><li><strong>WebXmlApplicationContext：</strong>此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。</li></ul><p><strong><font size="4">依赖注入</font></strong></p><p><strong>1. 什么是Spring的依赖注入？</strong><br>依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。</p><p><strong>2.  有哪些不同类型的IOC（依赖注入）方式？</strong></p><ul><li><p><strong>构造器依赖注入：</strong>构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。</p></li><li><p><strong>Setter方法注入：</strong>Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。</p></li></ul><p><strong><font size="4">Spring Beans</font></strong></p><p><strong>1.什么是Spring beans?</strong><br>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中<bean> 的形式定义。</bean></p><p>Spring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。</p><p><strong>2.一个 Spring Bean 定义 包含什么？</strong><br>一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。</p><p><strong>3. 如何给Spring 容器提供配置元数据?</strong><br>这里有三种重要的方法给Spring 容器提供配置元数据：</p><p>XML配置文件。</p><p>基于注解的配置。</p><p>基于java的配置。</p><p><strong>4. 你怎样定义类的作用域?</strong><br>当定义一个<bean> 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。</bean></p><p><strong>5. 解释Spring支持的几种bean的作用域。</strong><br>Spring框架支持以下五种bean的作用域：</p><ul><li><p><strong>singleton：</strong>bean在每个Spring ioc 容器中只有一个实例。</p></li><li><p><strong>prototype：</strong>一个bean的定义可以有多个实例。</p></li><li><p><strong>request：</strong>每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</p></li><li><p><strong>session：</strong>在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p></li><li><p><strong>global-session：</strong>在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p></li></ul><p>缺省的Spring bean 的作用域是Singleton.</p><p><strong>6. Spring框架中的单例bean是线程安全的吗?</strong><br>不，Spring框架中的单例bean不是线程安全的。</p><p><strong>7. 解释Spring框架中bean的生命周期。</strong></p><ul><li><p>Spring容器 从XML 文件中读取bean的定义，并实例化bean。</p></li><li><p>Spring根据bean的定义填充所有的属性。</p></li><li><p>如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。</p></li><li><p>如果Bean 实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory 方法。</p></li><li><p>如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。</p></li><li><p>如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调用此初始化方法。</p></li><li><p>如果有BeanPostProcessors 和bean 关联，这些bean的postProcessAfterInitialization() 方法将被调用。</p></li><li><p>如果bean实现了 DisposableBean，它将调用destroy()方法。</p></li></ul><p><strong>8. 什么是Spring的内部bean？</strong><br>当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义inner bean，在Spring 的 基于XML的 配置元数据中，可以在 <property>或 <constructor-arg> 元素内使用<bean> 元素，内部bean通常是匿名的，它们的Scope一般是prototype。</bean></constructor-arg></property></p><p><strong>9. 在 Spring中如何注入一个java集合？</strong><br>Spring提供以下几种集合的配置元素：</p><ul><li><p><list>类型用于注入一列值，允许有相同的值。</list></p></li><li><p><set> 类型用于注入一组值，不允许有相同的值。</set></p></li><li><p><map> 类型用于注入一组键值对，键和值都可以为任意类型。</map></p></li><li><p><props>类型用于注入一组键值对，键和值都只能为String类型。</props></p></li></ul><p><strong>10. 什么是bean装配?</strong><br>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p><p><strong>11. 什么是bean的自动装配？</strong><br>Spring 容器能够自动装配相互合作的bean，这意味着容器不需要<constructor-arg>和<property>配置，能通过Bean工厂自动处理bean之间的协作。</property></constructor-arg></p><p><strong>12. 解释不同方式的自动装配 。</strong><br>有五种自动装配的方式，可以用来指导Spring容器用自动装配方式来进行依赖注入：</p><ul><li><p><strong>no：</strong>默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。</p></li><li><p><strong>byName：</strong>通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。</p></li><li><p><strong>byType:：</strong>通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</p></li><li><p><strong>constructor：</strong>这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</p></li><li><p><strong>autodetect：</strong>首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</p></li></ul><p><strong>13.自动装配有哪些局限性 ?</strong><br>自动装配的局限性是：</p><ul><li><p><strong>重写：</strong>你仍需用 <constructor-arg>和 <property> 配置来定义依赖，意味着总要重写自动装配。</property></constructor-arg></p></li><li><p><strong>基本数据类型：</strong>你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</p></li><li><p><strong>模糊特性：</strong>自动装配不如显式装配精确，如果有可能，建议使用显式装配。</p></li></ul><p><strong>14. 你可以在Spring中注入一个null 和一个空字符串吗？</strong><br>可以。</p><p><strong><font size="4">Spring注解</font></strong></p><p><strong>1. 什么是基于Java的Spring注解配置? 给一些注解的例子.</strong><br>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。</p><p>以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。</p><p><strong>2. 什么是基于注解的容器配置?</strong><br>相对于XML文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。</p><p>开发者通过在相应的类，方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用xml表述bean的装配关系。</p><p><strong>3. 怎样开启注解装配？</strong><br>注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 需要在applicationContext.xml中注册&lt;context:component-scan base-package=”pagkage1[,pagkage2,…,pagkageN]”/&gt;。</p><p><strong>4. @Required  注解</strong><br>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</p><p><strong>5. @Autowired 注解</strong><br>@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。</p><p><strong>6. @Qualifier 注解</strong><br>当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</p><p><strong>7.@Controller</strong><br>@Controller对应表现层的Bean，也就是servlet，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 @Controller</span><br><span class="line">2 @Scope(&quot;prototype&quot;)</span><br><span class="line">3 public class UserAction extends BaseAction&lt;User&gt;&#123;</span><br><span class="line">4 ……</span><br><span class="line">5 &#125;</span><br></pre></td></tr></table></figure></p><font color="red">使用@Controller注解标识UserAction之后，就表示要把UserAction交给Spring容器管理，在Spring容器中会存在一个名字为”userAction”的action，这个名字是根据UserAction类名来取的。注意：如果@Controller不指定其value【@Controller】，则默认的bean名字为这个类的类名首字母小写，如果指定value【@Controller(value=”UserAction”)】或者【@Controller(“UserAction”)】，则使用value作为bean的名字。</font><p><strong>8、@ Service</strong><br>@Service对应的是业务层Bean，例如：<br><figure class="highlight plain"><figcaption><span>@Service("userService")</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 public class UserServiceImpl implements UserService &#123;</span><br><span class="line">3 ………</span><br><span class="line">4 &#125;</span><br></pre></td></tr></table></figure></p><p>@Service(“userService”)注解是告诉Spring，当Spring要创建UserServiceImpl的的实例时，bean的名字必须叫做”userService”，这样当Action需要使用UserServiceImpl的的实例时,就可以由Spring创建好的”userService”，然后注入给Action：在Action只需要声明一个名字叫“userService”的变量来接收由Spring注入的”userService”即可，具体代码如下：</p><figure class="highlight plain"><figcaption><span>// 注入userService</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 @Resource(name = &quot;userService&quot;)</span><br><span class="line">3 private UserService userService;</span><br></pre></td></tr></table></figure><p><strong>9、@ Repository</strong><br>@Repository对应数据访问层Bean ，例如：<br><figure class="highlight plain"><figcaption><span>@Repository(value</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 public class UserDaoImpl extends BaseDaoImpl&lt;User&gt; &#123;</span><br><span class="line">3 ………</span><br><span class="line">4 &#125;</span><br></pre></td></tr></table></figure></p><p>@Repository(value=”userDao”)注解是告诉Spring，让Spring创建一个名字叫“userDao”的UserDaoImpl实例。</p><p>当Service需要使用Spring创建的名字叫“userDao”的UserDaoImpl实例时，就可以使用@Resource(name = “userDao”)注解告诉Spring，Spring把创建好的userDao注入给Service即可。</p><figure class="highlight plain"><figcaption><span>// 注入userDao，从数据库中根据用户Id取出指定用户时需要用到</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 @Resource(name = &quot;userDao&quot;)</span><br><span class="line">3 private BaseDao&lt;User&gt; userDao;</span><br></pre></td></tr></table></figure><p><strong><font size="4">Spring数据访问</font></strong></p><p><strong>1.在Spring框架中如何更有效地使用JDBC?</strong><br>使用SpringJDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写statements 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，这个模板叫JdbcTemplate （例子见<a href="https://examples.javacodegeeks.com/enterprise-java/spring/jdbc/spring-jdbctemplate-example/" target="_blank" rel="noopener">这里</a>）</p><p><strong>2. JdbcTemplate</strong><br>JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。</p><p><strong>3. Spring对DAO的支持</strong><br>Spring对数据访问对象（DAO）的支持旨在简化它和数据访问技术如JDBC，Hibernate or JDO 结合使用。这使我们可以方便切换持久层。编码时也不用担心会捕获每种技术特有的异常。</p><p><strong>4. Spring支持的事务管理类型</strong></p><ul><li><p><strong>编程式事务管理：</strong>这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</p></li><li><p><strong>声明式事务管理：</strong>这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</p></li></ul><p><strong><font size="4">Spring面向切面编程（AOP）</font></strong></p><p><strong>1.  解释AOP</strong><br>面向切面的编程，或AOP， 是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。</p><p><strong>2. Aspect 切面</strong><br>AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。</p><p><strong>3. 在Spring AOP 中，关注点和横切关注的区别是什么？</strong><br>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。<br>横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p><p><strong>4. 连接点</strong><br>连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</p><p><strong>5.通知</strong><br>通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。</p><p>Spring切面可以应用五种类型的通知：  </p><ul><li><p><strong>before：</strong>前置通知，在一个方法执行前被调用。</p></li><li><p><strong>after: </strong>在方法执行之后调用的通知，无论方法执行是否成功。</p></li><li><p><strong>after-returning:</strong>仅当方法成功完成后执行的通知。</p></li><li><p><strong>after-throwing:</strong>在方法抛出异常退出时执行的通知。</p></li><li><p><strong>around:</strong>在方法执行之前和之后调用的通知。</p></li></ul><p><strong>6. 切点</strong><br>切入点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</p><p><strong>7. 什么是引入?</strong><br>引入允许我们在已存在的类中增加新的方法和属性。</p><p><strong>8. 什么是织入。什么是织入应用的不同点？</strong><br>织入是将切面和到其他应用类型或对象连接或创建一个被通知对象的过程。</p><p>织入可以在编译时，加载时，或运行时完成。</p><p><strong><font size="4">Spring 的MVC</font></strong></p><p><strong>1.什么是Spring的MVC框架？</strong><br>Spring 配备构建Web 应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。</p><p><strong>2.DispatcherServlet</strong><br>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。</p><p><strong>3.WebApplicationContext</strong><br>WebApplicationContext 继承了ApplicationContext  并增加了一些WEB应用必备的特有功能，它不同于一般的ApplicationContext ，因为它能处理主题，并找到被关联的servlet。</p><p><strong>4. 什么是Spring MVC框架的控制器？</strong><br>控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。Spring用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。</p><p><strong>5.@Controller 注解</strong><br>该注解表明该类扮演控制器的角色，Spring不需要你继承任何其他控制器基类或引用Servlet API。</p><p><strong>6.@RequestMapping 注解</strong><br>该注解是用来映射一个URL到一个类或一个特定的方处理法上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring 概述  &lt;/li&gt;
&lt;li&gt;依赖注入  &lt;/li&gt;
&lt;li&gt;Spring beans  &lt;/li&gt;
&lt;li&gt;Spring注解  &lt;/li&gt;
&lt;li&gt;Spring数据访问  &lt;/li&gt;
&lt;li&gt;S
      
    
    </summary>
    
      <category term="java学习笔记" scheme="http://yasso.top/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>mybatis+spring整合（一）</title>
    <link href="http://yasso.top//blog/2018/06/05/spring+mybatis1/"/>
    <id>http://yasso.top//blog/2018/06/05/spring+mybatis1/</id>
    <published>2018-06-05T05:36:03.768Z</published>
    <updated>2018-06-07T13:50:02.794Z</updated>
    
    <content type="html"><![CDATA[<p>一. 添加spring和mybatis的jar包，注意还有个mybatis-spring.jar</p><p><img src="https://i.imgur.com/1xLUXao.png" alt=""></p><p>二.搭建项目结构</p><p><img src="https://i.imgur.com/3oLX18R.png" alt=""></p><p>三.编写applicationContext.xml文件：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;&lt;!-- 包扫描 --&gt;&lt;context:component-scan base-package=&quot;com.bdqn.zmj&quot; /&gt;&lt;!-- 引入外部的db.properties文件 --&gt;&lt;!-- ctrl+shift+t --&gt;&lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;&lt;property name=&quot;location&quot; value=&quot;classpath:db.properties&quot; /&gt;&lt;/bean&gt;&lt;!-- 配置数据源 --&gt;&lt;!-- 用的是dbcp2连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;&lt;property name=&quot;driverClassName&quot; value=&quot;${driver}&quot; /&gt;&lt;property name=&quot;url&quot; value=&quot;${url}&quot; /&gt;&lt;property name=&quot;username&quot; value=&quot;${user}&quot; /&gt;&lt;property name=&quot;password&quot; value=&quot;${password}&quot; /&gt;&lt;!-- 连接初始值，连接池启动时创建的连接数量的初始值 默认值是0 --&gt;&lt;property name=&quot;initialSize&quot; value=&quot;${initialSize}&quot; /&gt;&lt;!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 默认值是0 --&gt;&lt;property name=&quot;minIdle&quot; value=&quot;${minIdle}&quot; /&gt;&lt;!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制 默认值是8 --&gt;&lt;property name=&quot;maxIdle&quot; value=&quot;${maxIdle}&quot; /&gt;&lt;/bean&gt;&lt;!-- 引入mybatis县相关配置文件 --&gt;&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;&lt;!-- mybatis核心文件路径 --&gt;&lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;&lt;!-- xml映射文件路径 --&gt;&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/bdqn/zmj/mapper/*.xml&quot;/&gt;&lt;/bean&gt;&lt;!-- 配置dao层接口的扫描器 --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;&lt;!-- basePackage 属性是接口文件的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径 --&gt;&lt;property name=&quot;basePackage&quot; value=&quot;com/bdqn/zmj/dao&quot;/&gt;&lt;!-- 引入SqlSessionFactoryBean --&gt;&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>四. 编写mybatis-config.xml文件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;!-- 配置实体类的别名 --&gt;&lt;typeAliases&gt;&lt;package name=&quot;com.bdqn.zmj.entity&quot; /&gt;&lt;/typeAliases&gt;&lt;/configuration&gt;</code></pre><p>五.编写dao接口</p><pre><code>package com.bdqn.zmj.dao;import java.util.List;import com.bdqn.zmj.entity.User;public interface UserDao {/*** 全查询* @return*/List&lt;User&gt; getList();/*** 添加用户* @param user* @return*/int saveUser(User user);}</code></pre><p>六.编写service类</p><pre><code>package com.bdqn.zmj.service;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.bdqn.zmj.dao.UserDao;import com.bdqn.zmj.entity.User;@Servicepublic class UserService {@AutowiredUserDao dao;public List&lt;User&gt; getUserInfo() {return dao.getList();}public int saveUser(User user) {return dao.saveUser(user);}}</code></pre><p>七.编写实体类</p><pre><code>package com.bdqn.zmj.entitypublic class User {private String userId;private String userName;private String passWord;private int age;public String getUserId() {return userId;}public void setUserId(String userId) {this.userId = userId;}public String getUserName() {return userName;}public void setUserName(String userName) {this.userName = userName;}public String getPassWord() {return passWord;}public void setPassWord(String passWord) {this.passWord = passWord;}public int getAge() {return age;}public void setAge(int age) {this.age = age;}}</code></pre><p>八.编写sql映射文件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.bdqn.zmj.dao.UserDao&quot;&gt;&lt;!-- 自定义映射关系 --&gt;&lt;resultMap type=&quot;User&quot; id=&quot;userResultMap&quot;&gt;&lt;result property=&quot;userId&quot; column=&quot;user_id&quot;/&gt;&lt;result property=&quot;userName&quot; column=&quot;user_name&quot;/&gt;&lt;result property=&quot;passWord&quot; column=&quot;user_password&quot;/&gt;&lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;&lt;/resultMap&gt;&lt;select id=&quot;getList&quot; resultMap=&quot;userResultMap&quot;&gt;select * from t_user&lt;/select&gt;&lt;insert id=&quot;saveUser&quot; parameterType=&quot;User&quot;&gt;insert into t_user values(#{userId},#{userName},#{passWord},#{age})&lt;/insert&gt;&lt;/mapper&gt;</code></pre><p>九.编写测试类</p><pre><code>package com.bdqn.zmj.servlet;import java.util.List;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.alibaba.fastjson.JSON;import com.bdqn.zmj.entity.User;import com.bdqn.zmj.service.UserService;public class TestMain {UserService service;public void load(){ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);service = (UserService) ctx.getBean(&quot;userService&quot;);}@Testpublic void test1(){//首先创建serviceload();//调用方法List&lt;User&gt; list = service.getUserInfo();for (User user : list) {System.out.println(JSON.toJSONString(user));}}@Testpublic void test2(){//首先创建serviceload();//调用方法User user = new User();user.setUserId(&quot;003&quot;);user.setUserName(&quot;王五&quot;);user.setPassWord(&quot;1234&quot;);user.setAge(30);int result = service.saveUser(user);System.out.println(result);}}</code></pre><p>十.数据表结构</p><p><img src="https://i.imgur.com/IFLMEhW.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一. 添加spring和mybatis的jar包，注意还有个mybatis-spring.jar&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/1xLUXao.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;二.搭建项目结构&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
      <category term="java学习笔记" scheme="http://yasso.top/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客教程</title>
    <link href="http://yasso.top//blog/2018/06/03/Hexo1/"/>
    <id>http://yasso.top//blog/2018/06/03/Hexo1/</id>
    <published>2018-06-03T09:20:05.042Z</published>
    <updated>2018-06-07T13:50:52.645Z</updated>
    
    <content type="html"><![CDATA[<p><strong>搭建个人博客=域名(外网可访问的地址)+外网服务器(外网存储文件图片的地方)+解析(本地与服务器做映射)</strong></p><font size="5">1.下载git：</font><p>方式一(官网下载)：<a href="https://git-scm.com/download/win(到此页面后，稍微等一下会有下载弹框)" target="_blank" rel="noopener">https://git-scm.com/download/win(到此页面后，稍微等一下会有下载弹框)</a></p><p>方式二(csdn下载)：<a href="http://download.csdn.net/download/ainuser/9952103" target="_blank" rel="noopener">http://download.csdn.net/download/ainuser/9952103</a></p><font size="5">安装git(见图)：</font><br><img src="https://i.imgur.com/95LcHxT.jpg" alt=""><br><img src="https://i.imgur.com/mkJhp2s.jpg" alt=""><br><img src="https://i.imgur.com/4HpcyBk.jpg" alt=""><br><img src="https://i.imgur.com/u4k00ns.jpg" alt=""><br><img src="https://i.imgur.com/MXSc4un.jpg" alt=""><br><img src="https://i.imgur.com/1Nwxjn7.jpg" alt=""><br><img src="https://i.imgur.com/jsAQPS2.jpg" alt=""><br><img src="https://i.imgur.com/KzLrSVu.jpg" alt=""><br><br>安装git结束<br><br><font size="5">2.下载node.js：</font><br>下载方式一：<a href="http://nodejs.org/download/" target="_blank" rel="noopener">http://nodejs.org/download/</a><br><br>下载方式二：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br><br>下载方式三：<a href="http://download.csdn.net/download/ainuser/9952074" target="_blank" rel="noopener">http://download.csdn.net/download/ainuser/9952074</a><br><br><font size="5">安装node.js：</font><br><img src="https://i.imgur.com/ELteh8r.jpg" alt=""><br><img src="https://i.imgur.com/5DXv4CZ.jpg" alt=""><br><img src="https://i.imgur.com/vNOXGMi.jpg" alt=""><br><img src="https://i.imgur.com/rpdcy8K.jpg" alt=""><br><img src="https://i.imgur.com/gR2DFcK.jpg" alt=""><br><img src="https://i.imgur.com/vfQzUPz.jpg" alt=""><br><br>安装node.js结束<br><br><font size="5">3.安装hexo：</font><br>首先在本地磁盘中建立一个Hexo文件夹（名字随意）用于存储本地文件(做本地文件保存以及测试使用)<br><br><img src="https://i.imgur.com/kv1OsTj.jpg" alt=""><br><br><font color="red">然后在文件夹中右击打开git命令框</font><br><img src="https://i.imgur.com/WZSvO93.jpg" alt=""><br><br><font color="red">在git命令框中安装Hexo(npm<br> install -g hexo)</font><br><img src="https://i.imgur.com/SFEaYdy.jpg" alt=""><br><br><font color="red">初始化(hexo init)</font><br><img src="https://i.imgur.com/CGdLuld.jpg" alt=""><br><br><font color="red">启动服务(npm install –&gt;hexo server –&gt;hexo clean –&gt;hexo generate –&gt;hexo deploy)</font><br><img src="https://i.imgur.com/LYdhRKA.jpg" alt=""><br><br>浏览器输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>,按理来说应该会出现本地访问页面，但是按照此步骤可能不会出现<br><br><font color="red">注意：访问本地页面的时候hexo server 不可以按ctrl+c停止服务，否则会报404<br></font><p>解决：(npm install hexo-deployer-git –save)<br><img src="https://i.imgur.com/JQCpTFN.jpg" alt=""></p><p>重新部署更新<font color="red">(下面这条命令会经常用到)</font></p><p>(hexo<br> clean –&gt;hexo generate –&gt;hexo deploy)</p><p>本地测试:<br><img src="https://i.imgur.com/jEtIOwm.jpg" alt=""></p><font size="5">4.注册github</font><br>地址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 输入账号、邮箱、密码,然后点击注册按钮.–&gt;之后验证邮箱<br><br><font size="5">在github上面创建项目(借用github服务器)</font><br><img src="https://i.imgur.com/rIXEpmp.jpg" alt=""><br><img src="https://i.imgur.com/2uiMwF4.jpg" alt=""><br>很多设置信息等都在setting里面大家可以去这里面找想要的设置选项等等信息<br><img src="https://i.imgur.com/8Ld6XpZ.jpg" alt=""><br><font size="5">购买域名：<a href="https://wanwang.aliyun.com/domain/" target="_blank" rel="noopener">https://wanwang.aliyun.com/domain/</a></font><br><font size="5">购买流程</font><br><img src="https://i.imgur.com/yMJIZQY.jpg" alt=""><br><br>下面的流程就跟淘宝购物一样了，别选多余的，就购买域名即可，其他的全家桶就不要购买了<br><img src="https://i.imgur.com/kbnjdi1.jpg" alt=""><br><br>支付成功之后的截图<br><img src="https://i.imgur.com/NwmF3PE.png" alt=""><br><br>然后就是解析(通俗来讲也就是本地与服务器做映射)<br><img src="https://i.imgur.com/ID0z4DD.jpg" alt=""><br><img src="https://i.imgur.com/LST7mKT.jpg" alt=""><br><br>然后设置网站解析(让你输入的IP是这样得到的)<br><br>键盘快捷键win+r输入cmd回车/或者win+x-&gt;a-&gt;是<br>得到如下dos窗口后输入ping ainusers.github.io(ainusers是我的名字，就是上面注册github项目的名字即你的用户名)<br><br>因为你刚才创建的项目已经被放到github服务器上面了，所以你这样相当于租用了github的服务器<br><img src="https://i.imgur.com/76shvCG.jpg" alt=""><br><br>将IP输入到解析网站的弹框中即可完成解析<br><br>还有三个需要设置的地方:<br><br>a：<br><img src="https://i.imgur.com/Bvu2M6E.jpg" alt=""><br><br>b：在D盘Hexo目录下的source中建一个CNAME命名的文件夹(切记没有后缀)<br><br>创建方式<br>右键新建txt文本-&gt;输入你购买的域名 <a href="http://www.ainusers.top" target="_blank" rel="noopener">http://www.ainusers.top</a> -&gt;保存关闭<br>然后快捷键F2或者右键该文本重命名-&gt;将.txt后缀去掉-&gt;会提示文件不可用继续确定即可<br><img src="https://i.imgur.com/SKXpITt.jpg" alt=""><br><br>内容如下所示<br><img src="https://i.imgur.com/qx1Fbm2.jpg" alt=""><br><br>c：绑定域名<br><img src="https://i.imgur.com/9RcYFFY.jpg" alt=""><br><img src="https://i.imgur.com/QBYlyD1.jpg" alt=""><br><img src="https://i.imgur.com/xVY7RKr.jpg" alt=""><br><img src="https://i.imgur.com/kcLZO98.jpg" alt=""><br><font color="red">注意，如果为不可选状态，请先选择Theme Chooser选项，然后选择一个主题，然后再执行上步操作</font><p>域名从.github.io后缀修改成你的域名后缀，才可以说明你以上步骤正确。</p><p>我在网上找了一个例子，比如下图所示<br><img src="https://i.imgur.com/JXhMCFi.png" alt=""></p><p>修改_config.yml<br><img src="https://i.imgur.com/EJ1qo3p.jpg" alt=""></p><p>配置github项目连接(<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repository: https://github.com/leopardpan/leopardpan.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></p><p>):<br><img src="https://i.imgur.com/RBNxTC3.jpg" alt=""></p><p>使git部署</p><p><code>npm install hexo-deployer-git --save</code></p><p>基本的流程到这里快要结束了</p><p>最后执行:(hexo<br> clean –&gt;hexo generate –&gt;hexo deploy)</p><p>你就可以看到你的博客了</p><p>记住，每次修改配置信息或者其他必须要执行上面的步骤，才可以使得配置信息生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;搭建个人博客=域名(外网可访问的地址)+外网服务器(外网存储文件图片的地方)+解析(本地与服务器做映射)&lt;/strong&gt;&lt;/p&gt;
&lt;font size=&quot;5&quot;&gt;1.下载git：&lt;/font&gt;

&lt;p&gt;方式一(官网下载)：&lt;a href=&quot;https://g
      
    
    </summary>
    
      <category term="其他" scheme="http://yasso.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
